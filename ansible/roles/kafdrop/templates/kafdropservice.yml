# oc run kafdrop --port 9000 --env KAFKA_BROKERCONNECT=kafka-cluster-kafka-brokers:9092 --env JVM_OPTS="-Xms32M -Xmx64M" --env SERVER_SERVLET_CONTEXTPATH="/" --env CMD_ARGS="--message.format=PROTOBUF --protobufdesc.directory=/var/protobuf_desc" --image=obsidiandynamics/kafdrop

kind: List
apiVersion: v1
items:
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    labels:
      app: {{ application_name }}
    name: {{ application_name }}
  spec:
    port:
      targetPort: http
    tls:
      termination: edge
    to:
      kind: Service
      name: {{ application_name }}
    wildcardPolicy: None
- apiVersion: v1
  kind: Service
  metadata:
    name: {{ application_name }}
    labels:
      expose: "true"
      app: {{ application_name }}
  spec:
    ports:
      - name: http
        port: 8080
        protocol: TCP
        targetPort: 9000
    selector:
      group: kafdrop
      app: {{ application_name }}
    sessionAffinity: None
    type: ClusterIP
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: {{ application_name }}
    name: {{ application_name }}
  spec:
    replicas: 1
    selector:
      group: kafdrop
      app: {{ application_name }}
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 3600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          group: kafdrop
          app: {{ application_name }}
      spec:
        containers:
          - image: {{ image_name }}:{{ image_tag }}
            name: {{ application_name }}
            ports:
            - containerPort: 9000
            env:
              - name: KAFKA_BROKERCONNECT
                value: {{ kafka_bootstrap_address }}
              - name: JVM_OPTS
                value: "-Xms32M -Xmx64M"
              - name: SERVER_SERVLET_CONTEXTPATH
                value: "/"
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: {{ application_name }}
        serviceAccountName: {{ application_name }}
        terminationGracePeriodSeconds: 30
    triggers:
      - type: ConfigChange
      - imageChangeParams:
          automatic: true
          containerNames:
            - {{ application_name }}
          from:
            kind: ImageStreamTag
            name: "{{ application_name }}:{{ image_tag }}"
        type: ImageChange
              
