version: '3.7'

services:

  zookeeper:
    container_name: zookeeper
    image: quay.io/strimzi/kafka:latest-kafka-3.1.2
    command: [
      "sh", "-c",
      "bin/zookeeper-server-start.sh config/zookeeper.properties"
    ]
    ports:
      - "2181:2181"
    environment:
      LOG_DIR: /tmp/logs
    networks:
      - default

# https://github.com/pubnub/kafka-bridge/blob/master/kafka/plain/docker-compose.yaml
#   Allows for kafka client that is external to the container network (ie: on the host) to connect to this Kafka broker and consume messages
#   NOTE: via this configuration, kafka is available to external clients on port: 9094
  kafka:
    container_name: kafka
    image: quay.io/strimzi/kafka:latest-kafka-3.1.2
    command: [
      "sh", "-c",
      "bin/kafka-server-start.sh config/server.properties --override listeners=INSIDE://:9092,OUTSIDE://:9094 --override listener.security.protocol.map=INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT --override advertised.listeners=INSIDE://:9092,OUTSIDE://localhost:9094 --override zookeeper.connect=zookeeper:2181 --override inter.broker.listener.name=INSIDE"
    ]
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9094:9094"
    environment:
      LOG_DIR: "/tmp/logs"
    networks:
      - default

  kafka-connect:
    container_name: kafka-connect

    # quay.io/debezium/connect:2.0 image can be used in a local podman/docker-compose environment
    # However, in an OCP environment involving the Strimzi, AMQ Streams operator (with KafkaConnector resources), the debezium images can not be used.
    # Instead, a custom image based on Strimzi/AMQ Streams images needs to be created.
    # See:  docker/kafka-connect-debezium-postgresql of this project for more details.
    image: quay.io/debezium/connect:2.0

    depends_on:
      - zookeeper
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: my_connect_configs
      OFFSET_STORAGE_TOPIC: my_connect_offsets
      STATUS_STORAGE_TOPIC: my_connect_statuses
    networks:
      - default

  kafdrop:
    container_name: kafdrop
    image: docker.io/obsidiandynamics/kafdrop:3.30.0
    restart: always
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:9092"
      JVM_OPTS: "-Xms32M -Xmx64M"
      SERVER_SERVLET_CONTEXTPATH: "/"
    depends_on:
      - kafka
    networks:
      - default


  psql-sso:
    container_name: psql-sso

    # https://github.com/sclorg/postgresql-container/blob/master/12/Dockerfile.rhel8
    image: registry.redhat.io/rhel8/postgresql-12:1-72.1626836556

    restart: always
    ports:
      - "4432:4432"
    environment:
      PGPORT: 4432
      POSTGRESQL_USER: sso
      POSTGRESQL_PASSWORD: sso
      POSTGRESQL_DATABASE: sso
      POSTGRESQL_MAX_PREPARED_TRANSACTIONS: 10
      SCRIPT_DIR: /opt/sql
    volumes:
    - ./sso/db/sso-psql.conf:/opt/app-root/src/postgresql-cfg/sso-psql.conf:bind
    networks:
      - default

  psql-fhir:
    container_name: psql-fhir

    # https://github.com/sclorg/postgresql-container/blob/master/12/Dockerfile.rhel8
    image: registry.redhat.io/rhel8/postgresql-12:1-72.1626836556

    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRESQL_USER: fhir
      POSTGRESQL_PASSWORD: fhir
      POSTGRESQL_DATABASE: fhir
      POSTGRESQL_MAX_PREPARED_TRANSACTIONS: 10
    volumes:
    - ./hapi-fhir/hapi-psql-wal.conf:/opt/app-root/src/postgresql-cfg/hapi-psql-wal.conf:bind
    - ./hapi-fhir/hapi-psql-wal.sh:/opt/app-root/src/postgresql-start/hapi-psql-wal.sh:bind
    networks:
      - default

  hapi-fhir:
    container_name: hapi-fhir

    # https://github.com/redhat-na-ssa/hapi-fhir-jpaserver-starter/tree/v6.1.0-pgsql-debezium
    image: quay.io/redhat_naps_da/hapi-fhir-jpaserver-starter-ocp:v6.1.0-psql-bytea-2

    restart: always
    ports:
      - "8080:8080"
    environment:
      JAVA_MAX_MEM_RATIO: '60'
      JAVA_INITIAL_MEM_RATIO: '0'
      GC_MAX_METASPACE_SIZE: '500'
      SPRING_CONFIG_LOCATION: "file:///deployments/config/application.yaml"
    volumes:
    - ./hapi-fhir/application.yaml:/deployments/config/application.yaml:bind
    depends_on:
      - "psql-fhir"
    networks:
      - default

  sepsis-risk:
    container_name: sepsis-risk
    image: quay.io/redhat_naps_da/sepsisdetection-risk:0.0.5
    restart: always
    ports:
      - "3080:3080"
    volumes:
    - ./sepsisdetection-risk/application.properties:/deployments/config/application.properties:bind
    depends_on:
      - "hapi-fhir"
    networks:
      - default

networks:
  default:
    driver: bridge
#  sepsis-ml:
#    driver: bridge
