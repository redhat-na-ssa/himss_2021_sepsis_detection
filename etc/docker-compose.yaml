version: '3.7'

# NETWORKING README
#   This docker compose assumes a networking architecture where: 
#     1)  containers are not in the same pod
#     2)  containers bind to the host and use the "port mapping" technique for deconfliction.
#   The above assumptions occurs by default when running this docker-compose in rootless podman4 via the default slirp4netns network setup:
#     https://github.com/containers/podman/blob/main/docs/tutorials/basic_networking.md#slirp4netns
#
#   As such, the containers created as per this compose file are configured to all bind to different ports on the host.
#   You need to ensure your host is not already running processes that bind to ports specified in this docker-compose file.
#   Also, this docker-compose file assumes that the host (and subsequently all containers bound to it) is resolvable by the name:  rht.
#   To accomplish this, it is recommended that you add an entry with the name "rht" to your /etc/hosts.  ie:
#       192.168.122.1     rht

services:

  ftools:
    container_name: ftools
    image: quay.io/jbride/ftools:0.0.6
    networks:
      - sepsis

  zookeeper:
    container_name: zookeeper
    image: registry.redhat.io/amq-streams/kafka-34-rhel8:2.4.0-5.1687182821
    command: [
      "sh", "-c",
      "bin/zookeeper-server-start.sh config/zookeeper.properties"
    ]
    ports:
      - "2181:2181"
    environment:
      LOG_DIR: /tmp/logs
    networks:
      - sepsis


# https://github.com/pubnub/kafka-bridge/blob/master/kafka/plain/docker-compose.yaml
#   Allows for kafka client that is external to the container network (ie: on the host) to connect to this Kafka broker and consume messages
#   NOTE: via this configuration, kafka is available to external clients on host at: "rht:9094"
  kafka:
    container_name: kafka
    image: registry.redhat.io/amq-streams/kafka-34-rhel8:2.4.0-5.1687182821
    command: [

      # Test using the following:
      #   $ podman run -it --rm --entrypoint /bin/bash  quay.io/jbride/ftools:0.0.3 -c "kcat -b rht:9092 -L"
      "sh", "-c",
      "bin/kafka-server-start.sh config/server.properties \
          --override zookeeper.connect=rht:2181 \
          --override listeners=INSIDE://:9092,OUTSIDE://:9094 --override listener.security.protocol.map=INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT \
          --override advertised.listeners=INSIDE://rht:9092,OUTSIDE://rht:9094 \
          --override inter.broker.listener.name=INSIDE"
    ]
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9094:9094"
    environment:
      LOG_DIR: "/tmp/logs"
    networks:
      - sepsis

  kafdrop:
    container_name: kafdrop
    image: docker.io/obsidiandynamics/kafdrop:3.30.0
    restart: always
    ports:
      - "9001:9000"
    environment:
      KAFKA_BROKERCONNECT: "rht:9092"
      JVM_OPTS: "-Xms32M -Xmx64M"
      SERVER_SERVLET_CONTEXTPATH: "/"
    depends_on:
      - kafka
    networks:
      - sepsis

  psql-sso:
    container_name: psql-sso

    # https://github.com/sclorg/postgresql-container/blob/master/12/Dockerfile.rhel8
    image: registry.redhat.io/rhel8/postgresql-12:1-72.1626836556

    restart: always
    ports:
      - "4432:4432"
    environment:
      PGPORT: 4432
      POSTGRESQL_USER: sso
      POSTGRESQL_PASSWORD: sso
      POSTGRESQL_DATABASE: sso
      POSTGRESQL_MAX_PREPARED_TRANSACTIONS: 10
      SCRIPT_DIR: /opt/sql
    volumes:
    - ./sso/db/sso-psql.conf:/opt/app-root/src/postgresql-cfg/sso-psql.conf:bind
    networks:
      - sepsis

  openldap:
    container_name: openldap
    image: docker.io/osixia/openldap:1.5.0
    restart: always
    ports:
      - "3389:389"
      - "6636:636"
    command: [--copy-service]
    volumes:
    - ./openldap/ldap-example-users-2.ldif:/container/service/slapd/assets/config/bootstrap/ldif/custom/ldap-example-users-2.ldif:bind
    networks:
      - sepsis

  kc-sso:
    container_name: kc-sso

    # https://github.com/redhat-na-ssa/keycloak_customizations_quickstart/blob/main/etc/sso/Dockerfile
    image: quay.io/jbride/keycloak:20.0.0-0-psql

    restart: always
    ports:
      - "4080:4080"

      # jdwp debugger port
      - "5006:5006"

      # Infinispan/JGroups TCP "start_port"
      - "7800:7800"

    # over-rides the following:
    #   1)  Sets custom set of features as per:  https://www.keycloak.org/server/features
    #   2)  Explicitly sets distributed infinispan cache (which is set to local with 'start-dev'
    command: ['start-dev', '--features="token-exchange,admin-fine-grained-authz,scripts,declarative-user-profile" --cache=ispn']

    environment:

      # Add the following entry in your /etc/hosts:  127.0.0.1  sso.local
      # https://www.keycloak.org/server/hostname
      KC_HOSTNAME_URL: http://sso.local:4080
      KC_HOSTNAME_ADMIN_URL: http://sso.local:4080

      # Setting this to `false` because the backend-oidc service connects to kc-sso via its docker-compose name:  kc-sso   (not sso.local)
      KC_HOSTNAME_STRICT_BACKCHANNEL: 'false'

      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB_URL: 'jdbc:postgresql://rht:4432/sso'
      KC_DB_USERNAME: sso
      KC_DB_PASSWORD: sso

      # Alternative approach to import a realm:  https://github.com/keycloak/kc-sig-fapi/blob/main/docker-compose-keycloak.yml#L41-L57
      JAVA_OPTS_APPEND: -Dkeycloak.migration.strategy=IGNORE_EXISTING -Dkeycloak.import=/opt/realm.json -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5006

      KC_HTTP_PORT: 4080
      KC_HTTPS_PORT: 4443

      QUARKUS_LOG_LEVEL: INFO
      QUARKUS_LOG_CATEGORY__ORG_KEYCLOAK_AUTHENTICATION__LEVEL: DEBUG
      QUARKUS_LOG_CATEGORY__ORG_KEYCLOAK_AUTHORIZATION__LEVEL: DEBUG
      QUARKUS_LOG_CATEGORY__ORG_KEYCLOAK_PROTOCOL_OIDC_ENDPOINTS__LEVEL: DEBUG
      QUARKUS_LOG_CATEGORY__ORG_KEYCLOAK_PROTOCOL_OIDC_ENDPOINTS__LEVEL: DEBUG
    volumes:
      - ./sso/realm.json:/opt/realm.json:bind
    healthcheck:
      test: ["CMD", "curl", "-f", "http://sso.local:4080/realms/kc-demo/.well-known/openid-configuration"]
      interval: 20s
      timeout: 5s
      retries: 5
    depends_on:
      - psql-sso
      - openldap
    networks:
      - sepsis 

  sepsis-ml:
    container_name: sepsis-ml
  
    # NOTE:  The following  image is built using:    "kn func build -i <image-name>:<image-version>" 
    #        More details can be found here: https://github.com/redhat-na-ssa/sepsis-detection/blob/master/serving/README.md
    image: quay.io/redhat_naps_da/sepsis-detection:1.3

    restart: always
    ports:
      - "5080:8080"
    networks:
      - sepsis

  psql-fhir:
    container_name: psql-fhir

    # https://github.com/sclorg/postgresql-container/blob/master/12/Dockerfile.rhel8
    image: registry.redhat.io/rhel8/postgresql-12:1-72.1626836556

    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRESQL_USER: fhir
      POSTGRESQL_PASSWORD: fhir
      POSTGRESQL_DATABASE: fhir
      POSTGRESQL_MAX_PREPARED_TRANSACTIONS: 10
    networks:
      - sepsis

  smilecdr:
    container_name: smilecdr

    image: quay.io/redhat_naps_da/smilecdr:2023.05.R02

    restart: always
    ports:
      - "8000:8000"       # ENDPOINT_FHIR_REST 
      - "8001:8001"       # ENDPOINT_FHIRWEB  / FHIR testing tool to explore the FHIR API
      - "9000:9000"       # ADMIN_JSON        / explore JSON API
      - "9100:9100"       # ADMIN_WEB
      - "9200:9200"       # SECURITY_OUT_SMART
      - "9201:9201"       # ???
    environment: []
    volumes:
    - ./smilecdr/cdr-config-Master.properties:/home/smile/smilecdr/classes/cdr-config-Master.properties:bind
    - ./smilecdr/logback-smile-custom.xml:/home/smile/smilecdr/logback-smile-custom.xml:bind
    depends_on:
      - "psql-fhir"
    networks:
      - sepsis

  sepsis-risk:
    container_name: sepsis-risk
    image: quay.io/redhat_naps_da/sepsisdetection-risk:0.0.6
    restart: always
    ports:
      - "3080:3080"
    volumes:
    - ./sepsisdetection-risk/application.properties:/deployments/config/application.properties:bind
    depends_on:
      - "smilecdr"
    networks:
      - sepsis


  sepsis-sse:
    container_name: sepsis-sse
    image: quay.io/redhat_naps_da/sepsisdetection-sse:0.0.6
    restart: always
    ports:
      - "4199:4199"
    volumes:
    - ./sepsisdetection-sse/application.properties:/deployments/config/application.properties:bind
    networks:
      - sepsis

  psql-rhpam:
    container_name: psql-rhpam

    # https://github.com/sclorg/postgresql-container/blob/master/12/Dockerfile.rhel8
    image: registry.redhat.io/rhel8/postgresql-12:1-72.1626836556

    restart: always
    ports:
      - "6432:6432"
    environment:
      PGPORT: 6432
      POSTGRESQL_USER: rhpam
      POSTGRESQL_PASSWORD: rhpam
      POSTGRESQL_DATABASE: rhpam
      POSTGRESQL_MAX_PREPARED_TRANSACTIONS: 10
      SCRIPT_DIR: /opt/sql
    volumes:
    - ./sepsisdetection-rhpam/db/rhpam-psql.conf:/opt/app-root/src/postgresql-cfg/rhpam-psql.conf:bind
    - ./sepsisdetection-rhpam/db/ddl-scripts/postgresql/:/opt/sql:bind
    - ./sepsisdetection-rhpam/db/create_rhpam_database.sh:/opt/app-root/src/postgresql-start/create_rhpam_database.sh:bind
    depends_on:
      - kafka
    networks:
      - sepsis

#  dashbuilder:
#    container_name: dashbuilder
#    image: quay.io/redhat_naps_da/dashbuilder-rhpam-db:0.0.2
#    restart: always
#    ports:
#      - "6080:6080"
#    environment:
#      JAVA_OPTIONS: "-Dquarkus.http.host=0.0.0.0 -Dquarkus.http.port=6080 -Djava.util.logging.manager=org.jboss.logmanager.LogManager -Ddashbuilder.runtime.multi=true -Ddashbuilder.datasources=jbpmdb -Ddashbuilder.datasource.jbpmdb.jdbcUrl=jdbc:postgresql://rht:6432/rhpam -Ddashbuilder.datasource.jbpmdb.providerClassName=org.postgresql.Driver -Ddashbuilder.datasource.jbpmdb.maxSize=10 -Ddashbuilder.datasource.jbpmdb.principal=rhpam -Ddashbuilder.datasource.jbpmdb.credential=rhpam -Dquarkus.http.enable-compression=false -Ddashbuilder.import.base.dir=/opt/dashbuilder"
#    depends_on:
#      - psql-rhpam
#    networks:
#      - sepsis

  sepsisdetection-rhpam:
    container_name: sepsis-rhpam
    image: quay.io/redhat_naps_da/sepsisdetection-rhpam:0.0.15
    restart: always
    ports:
      - "9080:9080"
    environment:
      JAVA_MAX_MEM_RATIO: '60'
      JAVA_INITIAL_MEM_RATIO: '0'
      GC_MAX_METASPACE_SIZE: '500'
      SPRING_CONFIG_LOCATION: "file:///deployments/config/application.properties"

      # org.kie.server.repo        : dictates to kie-server where to find its KIE container configuration file
      # kie.maven.settings.custom  : dictates to kie-server where to find its artifact repo of KJars
      JAVA_OPTS_APPEND: '-Dorg.kie.server.repo=/deployments/config -Dkie.maven.settings.custom=/m2/settings.xml'

      # Optional: Change to URL of Nexus (if in use)
      MAVEN_MIRROR_URL: ''

    volumes:
    - ./sepsisdetection-rhpam/runtime_configs:/deployments/config/:bind
    depends_on:
      - psql-rhpam
    networks:
      - sepsis

  sepsis_ui:
    container_name: sepsis-ui
    image: quay.io/redhat_naps_da/sepsisdetection-ui:0.0.15-sse
    restart: always
    ports:
      - "7080:7080"
    networks:
      - sepsis

networks:
  sepsis:
    name: sepsis
    driver: bridge
