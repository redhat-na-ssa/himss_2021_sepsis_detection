---

#######    Fhir Server Database    ##################


- name: "create {{ postgresql_service_account }} service account in {{ namespace }}"
  kubernetes.core.k8s:
    state: present
    name: "{{ postgresql_service_account }}"
    definition:
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: "{{ postgresql_service_account }}"
        namespace: "{{ namespace }}"

- set_fact:
    create_db_file: "{{ lookup('template', 'templates/sql/create_database.sh' )  }}"
    wait_for_psql_file: "{{ lookup('template', 'templates/sql/wait_for_postgresql.sh' )  }}"

- name: "create {{ postgresql_init_configmap }} configmap"
  kubernetes.core.k8s:
    state: present
    name: "{{ postgresql_init_configmap }}"
    namespace: "{{ namespace }}"
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: "{{ postgresql_init_configmap }}"
        namespace: "{{ namespace }}"
      data:
        create_database.sh: "{{ create_db_file }}"
        wait_for_postgresql.sh: "{{ wait_for_psql_file }}"

- name: "postgresql secret {{ psql_credentials_secret }}"
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: "{{ psql_credentials_secret }}"
        namespace: "{{ namespace }}"
      type: Opaque
      data:
        database-user: "{{ psql_user_name | b64encode }}"
        database-password: "{{ psql_user_passwd | b64encode }}"
        database-name: "{{ psql_db_name | b64encode }}"

- name: "deploy {{ psql_app_name }} in {{ namespace }}"
  kubernetes.core.k8s:
    state: present
    kind: DeploymentConfig
    definition: "{{ lookup('template', 'templates/postgresql.yml') | from_yaml }}"
    namespace: "{{ namespace }}"

- name: "wait until {{ psql_app_name }} database is up and running"
  shell: "{{ openshift_cli }} get dc {{ psql_app_name }} -o template --template={{ json_template }} -n {{ namespace }}"
  vars:
    json_template: '\{\{.status.readyReplicas\}\}'
  register: result
  until: result.stdout == "1"
  retries: 10
  delay: 30
  changed_when: false
###########################################################


########    FHIR Server    #############
- name: "create {{ service_account }} service account for {{ application_name }} application"
  kubernetes.core.k8s:
    state: present
    name: "{{ service_account }}"
    definition:
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: "{{ service_account }}"
        namespace: "{{ namespace }}"

- name: "give cluster admin privileges to {{ service_account }} service account"
  kubernetes.core.k8s:
    state: present
    name: "{{ service_account }}"
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: "{{ service_account }}"
        namespace: "{{ namespace }}"
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: admin
      subjects:
      - kind: ServiceAccount
        name: "{{ service_account }}"
        namespace: "{{ namespace }}"

- name: "copy cdr-config-Master.properties template"
  set_fact:
    aprops: "{{ lookup('template', 'templates/cdr-config-Master.properties' )  }}"

- name: "create {{ application_name }} application configmap"
  kubernetes.core.k8s:
    state: present
    name: "{{ application_name }}"
    namespace: "{{ namespace }}"
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: "{{ application_name }}"
      data:
        cdr-config-Master.properties: "{{ aprops }}"

- import_tasks: deploy_from_source.yml
  when: deploy_from is defined and deploy_from == "source"

- import_tasks: deploy_from_image.yml
  when: deploy_from is defined and deploy_from == "image"

- set_fact:
    route_hostname: "{{ application_name }}-{{ namespace }}.{{ ocp_domain_host.stdout }}"

- name: "deploy {{ application_name }} route {{ route_hostname }}"
  kubernetes.core.k8s:
    state: present
    kind: Deployment
    definition: "{{ lookup('template', 'templates/route.yml') | from_yaml }}"
    namespace: "{{ namespace }}"

###########################################################
